rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Special validation for watched_movies to prevent duplicates
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && (
          // Allow if not updating watched_movies
          !request.writeFields.hasAny(['watched_movies']) ||
          // Or if updating watched_movies, ensure no duplicates
          (request.writeFields.hasOnly(['watched_movies']) && 
           validateNoDuplicateWatchedMovies(request.resource.data.watched_movies))
        );
    }
    
    // Function to validate no duplicate movie IDs in watched_movies
    function validateNoDuplicateWatchedMovies(watchedMovies) {
      let movieIds = watchedMovies.map(movie, movie.movieId);
      return movieIds.toSet().size() == movieIds.size();
    }
    
    // Movie reviews collection
    match /movie_reviews/{reviewId} {
      // Anyone authenticated can read reviews
      allow read: if request.auth != null;
      
      // Only authenticated users can create reviews
      allow create: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Users can only edit their own reviews
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Anyone authenticated can update likes/dislikes counts
      allow update: if request.auth != null 
        && request.writeFields.hasOnly(['likes', 'dislikes']);
      
      // Users can delete their own reviews
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Review votes collection - for tracking user votes
    match /review_votes/{voteId} {
      // Anyone authenticated can read votes
      allow read: if request.auth != null;
      
      // Users can only create/update/delete their own votes
      allow create, update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Movies collection - read-only for all authenticated users
    match /movies/{movieId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can write movies
    }
    
    // Deny all other requests
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
